#!/usr/bin/env python
import optparse
import sys
import models
import math
from collections import namedtuple

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=1, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=1, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,  help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# tm should translate unknown words as-is with probability 1
for word in set(sum(french,())):
  if (word,) not in tm:
    tm[(word,)] = [models.phrase(word, 0.0)]

sys.stderr.write("Decoding %s...\n" % (opts.input,))
for f in french:
  # The following code implements a monotone decoding
  # algorithm (one that doesn't permute the target phrases).
  # Hence all hypotheses in stacks[i] represent translations of 
  # the first i words of the input sentence. You should generalize
  # this so that they can represent translations of *any* i words.
  bitvec = [0 for _ in f]
  hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase, bitvec, prev")
  initial_hypothesis = hypothesis(0.0, lm.begin(), None, None, bitvec, 0)
  stacks = [{} for _ in f] + [{}] # for every word in the tuple, create blank dictionary
  stacks[0][lm.begin()] = initial_hypothesis
  for i, stack in enumerate(stacks[:-1]):
    for h in sorted(stack.itervalues(),key=lambda h: -h.logprob)[:opts.s]: # prune
      for window in xrange(1, len(f)-i+1):
        #bitvec_local = h.bitvec
        for j in xrange(0,len(f)+1-window):
          l = j+window
          candidate = ()
	  bitvec = h.bitvec[:]
	  current = window
	  start = -1
          for k in xrange(j,l):
            #if len(candidate) <= window and l <= len(f):
            #  if bitvec_temp[k] == 0:
                candidate += (f[k],)
		if bitvec[k] == 0:
			start = k if start == -1 else start
			bitvec[k] = 1
			prev = k
		else:
			current -=1 
	#	sys.stderr.write(str(candidate))
                #bitvec_local[k] = 1
                #bitvec_temp[k] = 1
          #    else:
         #       l = l+1
	  #sys.stderr.write("\ni: %s, j: %s, win_length: %s, candidate: %s " %(i, j, window, candidate))
          if candidate in tm: # if phrase is in the tm dictionary
            for phrase in tm[candidate]: # for every possible english translation of that phrase in the value of the tm dictionary
              logprob = h.logprob + phrase.logprob #translation model logprob
              lm_state = h.lm_state
              for word in phrase.english.split():
                (lm_state, word_logprob) = lm.score(lm_state, word)
                logprob += word_logprob
              logprob += lm.end(lm_state) if j == len(f) else 0.0
	      distance = abs(start - h.prev - 1)
	      
	      logprob += math.log10(0.7**distance)
	      
              new_hypothesis = hypothesis(logprob, lm_state, h, phrase, bitvec, prev)
              #for idx, w in enumerate(f):
              #  if w in lm_state:
              #    bitvec[idx] = 1
                
              if lm_state not in stacks[i+current] or stacks[i+current][lm_state].logprob < logprob: # second case is recombination
		#sys.stderr.write("\ni: %s, j: %s, win_length: %s, lm_state: %s, candidate: %s " %(i, j, window, lm_state, candidate))
                stacks[i+current][lm_state] = new_hypothesis
  #print stacks[-1] 
  winner = max(stacks[-1].itervalues(), key=lambda h: h.logprob)
  def extract_english(h): 
    return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)
  print extract_english(winner)

  if opts.verbose:
    def extract_tm_logprob(h):
      return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
    tm_logprob = extract_tm_logprob(winner)
    sys.stderr.write("LM = %f, TM = %f, Total = %f\n" % 
      (winner.logprob - tm_logprob, tm_logprob, winner.logprob))

